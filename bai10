import numpy as np
import skfuzzy as fuzz
from skfuzzy import control as ctrl

traffic_condition = ctrl.Antecedent(np.arange(0, 101, 1), 'traffic_condition')
distance_to_Customer = ctrl.Antecedent(np.arange(0, 10, 1), 'distance_to_Customer')
weather_condition = ctrl.Antecedent(np.arange(0, 3, 1), 'weather_condition')
order_preparation_time= ctrl.Antecedent(np.arange(0, 21, 1), 'order_preparation_time')
driver_fatigue_level = ctrl.Antecedent(np.arange(0, 101, 1), 'driver_fatigue_level')

estimated_delivery_time = ctrl.Consequent(np.arange(0, 30, 1), 'estimated_delivery_time')
incentive_bonus = ctrl.Consequent(np.arange(0, 101, 1), 'incentive_bonus')
driver_performance_rating = ctrl.Consequent(np.arange(1, 6, 1), 'driver_performance_rating')

traffic_condition['low'] = fuzz.gaussmf(traffic_condition.universe, 20, 10)
traffic_condition['medium'] = fuzz.gaussmf(traffic_condition.universe, 50, 20)
traffic_condition['high'] = fuzz.gaussmf(traffic_condition.universe, 80, 30)

distance_to_Customer['short'] = fuzz.gaussmf(distance_to_Customer.universe, 3, 1)
distance_to_Customer['medium'] = fuzz.gaussmf(distance_to_Customer.universe, 5, 1)
distance_to_Customer['long'] = fuzz.gaussmf(distance_to_Customer.universe, 8, 1)

weather_condition['clear'] = fuzz.gaussmf(weather_condition.universe, 1,1)
weather_condition['rain'] = fuzz.gaussmf(weather_condition.universe, 2, 1)
weather_condition['stormy'] = fuzz.gaussmf(weather_condition.universe, 2, 2)

order_preparation_time['fast'] = fuzz.gaussmf(order_preparation_time.universe, 3, 2)
order_preparation_time['medium'] = fuzz.gaussmf(order_preparation_time.universe, 10, 3)
order_preparation_time['slow'] = fuzz.gaussmf(order_preparation_time.universe, 18, 3)

driver_fatigue_level['low'] = fuzz.gaussmf(driver_fatigue_level.universe, 20, 10)
driver_fatigue_level['medium'] = fuzz.gaussmf(driver_fatigue_level.universe, 50, 15)
driver_fatigue_level['high'] = fuzz.gaussmf(driver_fatigue_level.universe, 80, 15)

estimated_delivery_time['short'] = fuzz.gaussmf(estimated_delivery_time.universe, 5, 10)
estimated_delivery_time['medium'] = fuzz.gaussmf(estimated_delivery_time.universe, 20, 10)
estimated_delivery_time['long'] = fuzz.gaussmf(estimated_delivery_time.universe, 35, 10)

incentive_bonus['low'] = fuzz.gaussmf(incentive_bonus.universe, 20, 10)
incentive_bonus['medium'] = fuzz.gaussmf(incentive_bonus.universe, 50, 15)
incentive_bonus['high'] = fuzz.gaussmf(incentive_bonus.universe, 80, 15)

driver_performance_rating['poor'] = fuzz.gaussmf(driver_performance_rating.universe, 1, 1.2)
driver_performance_rating['average'] = fuzz.gaussmf(driver_performance_rating.universe, 3, 1.0)
driver_performance_rating['excellent'] = fuzz.gaussmf(driver_performance_rating.universe, 5, 1.2)

rule1 = ctrl.Rule(traffic_condition['low'] & distance_to_Customer['short'], estimated_delivery_time['short'])
rule2 = ctrl.Rule(traffic_condition['medium'] & distance_to_Customer['medium'], estimated_delivery_time['medium'])
rule3 = ctrl.Rule(traffic_condition['high'] & distance_to_Customer['long'], estimated_delivery_time['long'])

rule4 = ctrl.Rule(weather_condition['clear'], incentive_bonus['low'])
rule5 = ctrl.Rule(weather_condition['rain'], incentive_bonus['medium'])
rule6 = ctrl.Rule(weather_condition['stormy'], incentive_bonus['high'])

rule7 = ctrl.Rule(order_preparation_time['fast'] & traffic_condition['low'], estimated_delivery_time['short'])
rule8 = ctrl.Rule(order_preparation_time['medium'] & traffic_condition['medium'], estimated_delivery_time['medium'])
rule9 = ctrl.Rule(order_preparation_time['slow'] & traffic_condition['high'], estimated_delivery_time['long'])

rule10 = ctrl.Rule(driver_fatigue_level['low'], driver_performance_rating['excellent'])
rule11 = ctrl.Rule(driver_fatigue_level['medium'], driver_performance_rating['average'])
rule12 = ctrl.Rule(driver_fatigue_level['high'], driver_performance_rating['poor'])

rule13 = ctrl.Rule(distance_to_Customer['long'] & weather_condition['stormy'] & traffic_condition['high'], 
                   (estimated_delivery_time['long'], incentive_bonus['high']))
rule14 = ctrl.Rule(distance_to_Customer['short'] & weather_condition['clear'] & traffic_condition['low'], 
                   (estimated_delivery_time['short'], incentive_bonus['low']))
rule15 = ctrl.Rule(driver_fatigue_level['high'] & traffic_condition['high'], 
                   (driver_performance_rating['poor'], estimated_delivery_time['long']))

delivery_ctrl = ctrl.ControlSystem([rule1, rule2, rule3, rule4, rule5, rule6, rule7, rule8, rule9, rule10, rule11, rule12, rule13, rule14, rule15])
delivery_simulation = ctrl.ControlSystemSimulation(delivery_ctrl)

estimated_delivery_time.view()
incentive_bonus.view()
![image](https://github.com/user-attachments/assets/b7c8c78c-ef89-4355-9de1-d8aa82513e6b)
